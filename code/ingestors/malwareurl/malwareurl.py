#!/usr/bin/python
try: 
    import os, sys, csv, zipfile, getopt, traceback, socket, urlparse, time, urllib2, string, datetime
    from threading import Thread
    import StringIO
    import json

except ImportError:
    print "error"
    import simplejson as json
    
    

class ingestor():
    def __init__(self, conn = None):
        print "initializing malwareurl ingestor. MMM GET SOME (malware)"
        self.data = []
        #export format url, ip, iplookup, AS, notes, date
        self.export_url = "http://www.malwareurl.com/reg-export-urls.php?export=urls2&key=7typb8dc3wtzykr48bbezyy78"
        self.rss_url = "http://www.malwareurl.com/reg-export-urls.php?export=rss&key=7typb8dc3wtzykr48bbezyy78"
        self.mysql_conn = None
        self.mysql_cursor = None
        self.status = None
        self.max_back = 14
        self.last_update = None
        self.refresh_seconds = None
        self.time_delta = 0
        self.mysql_date_fmt = "%Y-%M-%d"
        self.mysql_tdstamp_fmt = "%Y-%m%d %H:%M:%S"
        
            
    def load(self):
        print "pushing data to mysql"
        insert_query = "INSERT INTO malwareurl (tdstamp, url, ip, lookup, asn, notes, observed) VALUES (NOW(), '%s', INET_ATON('%s'), '%s', '%s', '%s', DATE('%s')) ON DUPLICATE KEY UPDATE tdstamp=tdstamp"
        if self.mysql_conn == None:
            self.mysql_conn = self.mysql_connect()
            
        if self.data == None:
            print "you need to load data numnuts"
            return None
           
      
        for d in self.data:
            #print insert_query % (d["url"], d["ip"], d["lookup"], d["asn"], d["notes"], d["observed"])
            self.mysql_cursor.execute(insert_query % (d["url"], d["ip"], d["lookup"], d["asn"], d["notes"], d["observed"]))
            
    def update(self):
        print "beginning to ingest the malwareurls"
        self.check_status()
        
        f = urllib2.urlopen(self.export_url)
        data = f.read()
        f.close()
        
        data_stream = StringIO.StringIO(data)
        reader = csv.reader(data_stream, delimiter=',', quoting=csv.QUOTE_MINIMAL)
        
        try:
            count = 0       
            for row in reader:
                #print "at row = %s" % count
                url = string.strip(row[0])
                ip = string.strip(row[1])
                lookup = string.strip(row[2])
                asn = string.strip(row[3])
                if asn.find("AS") >= 0:
                    asn = asn[2:]
                    
                notes = string.strip(row[4])
                observed = string.strip(row[5])
                
                data = {"url":url,  "ip":ip, "lookup":lookup, "asn":asn, "notes":notes, "observed":observed}
                self.data.append(data)
                count += 1
                
        except:
            exceptionType, exceptionValue, exceptionTraceback = sys.exc_info()
            print "error reading malwareurl record - skipping one record"
            traceback.print_exception(exceptionType, exceptionValue, exceptionTraceback, limit=2, file=sys.stdout)
            count +=1
            
        
        print "done reading malware url"
    
    def check_status(self):
        print "checking status with DS"
        if self.mysql_conn == None:
            self.mysql_connect()
            
        status_query = "SELECT notes, last_update, update_interval from status WHERE name LIKE 'malwareurl'"
        self.mysql_cursor.execute(status_query)
        row = self.mysql_cursor.fetchone()
        try:
            notes = row[0]
            self.last_update = row[1]
            self.refresh_seconds = int(row[2]) * 60 * 60
        except:
            print "wtf checking status"
            return None
        
        time_delta = (datetime.now() - last_update).total_seconds()
        
        if time_delta >= refresh_seconds:
            return True
        else:
            return False
               
