<%

import socket, MySQLdb, sys, Queue
from xml.dom.minidom import Document
from threading import Thread

sys.path.append("/home/dragonslayer/code/")
options = req.get_options()
options['mod_python.importer.path'] = "/home/dragonslayer/code/"

import dhcp_lookup2
#import dragonslayer

class dhcp_thread(Thread):
	def __init__(self, myid, ip):
		self.myid = myid
		self.ip = ip
		self.dhcp_ret = None
		Thread.__init__(self)
		
	def run(self):
		self.dhcp_ret = dhcp_lookup2.get_dhcp(self.ip)

	def ret_dhcp(self):
		return self.dhcp_ret

def get_ip_from_form():
	if form.has_key("ip"):
		ip = form["ip"]
	else:
		ip = 0

	return ip

def get_dns(ip):
	
	ret = socket.getfqdn(ip)
	
	if ret.find("gwu.edu") < 0:
		ret = "client"
		
	return ret


def check_duplicates(conn, ip):
	duplicate_query = "SELECT victim FROM gwcases WHERE INET_NTOA(victim)='" + str(ip) +  "' and DATE(tdstamp) BETWEEN CURDATE()-6 and CURDATE()"
	#print "duplicate_query = " + duplicate_query
	cursor = conn.cursor()
	cursor.execute(duplicate_query)
	row = cursor.fetchone()

	if row is None:
		return str(0)
	else:
		return str(1)
	

def get_network(conn, ip):
	network_query = "SELECT name from netblocks where INET_ATON('" + ip + "') BETWEEN start and end limit 1"
	cursor = conn.cursor()
	cursor.execute(network_query)
	row = cursor.fetchone()

	if row is None:
		row = ["unknown"]

	return row[0]

def get_macs(conn, ip):
	ret = []
	mac_query = "select mac from mac_view where ip = INET_ATON('%s')" % ip
	cursor = conn.cursor()
	cursor.execute(mac_query)
	while (1):
		row = cursor.fetchone()
		if row == None:
			break

		ret.append(row[0])

	return ret

def check_critical(conn, ip):
	query = "SELECT INET_NTOA(ip), notes FROM critical where ip = INET_ATON('%s')" % ip
	cursor = conn.cursor()
	cursor.execute(query)
	row = cursor.fetchone()
	
	if row is None:
		return "FALSE"

	ret = "CRITICAL HOST: " + str(row[0]) + " TRUE"
	return ret
	

def get_ip_msg(ipstr):

	thread_list = []
	
	dhcp_t = dhcp_thread(0, ipstr)
	dhcp_t.start()

	username = "dragonslayer"
	password = "slayer"
	database = "dragonslayer"
	
	conn = MySQLdb.connect(host = "localhost",
			       user = username,
			       passwd = password,
			       db = database)


	fqdn = get_dns(ipstr)
	dups = check_duplicates(conn, ipstr)
	net = get_network(conn, ipstr)
	macs = get_macs(conn, ipstr)
	crit = check_critical(conn, ipstr)

	dhcp_t.join()
	dhcp = dhcp_t.ret_dhcp()
	
	#build the xml reply
	doc=Document()
	ip_msg = doc.createElement("ip_msg")
	doc.appendChild(ip_msg)

	ip_addr = doc.createElement("ip_addr")
	ip_msg.appendChild(ip_addr)
	txt = doc.createTextNode(ipstr)
	ip_addr.appendChild(txt)

	name = doc.createElement("fqdn")
	ip_msg.appendChild(name)
	txt = doc.createTextNode(fqdn)
	name.appendChild(txt)

	has_dups = doc.createElement("recent_case")
	ip_msg.appendChild(has_dups)
	txt = doc.createTextNode(str(dups))
	has_dups.appendChild(txt)

	net_name = doc.createElement("network_name")
	ip_msg.appendChild(net_name)
	txt = doc.createTextNode(str(net))
	net_name.appendChild(txt)

	crit_name = doc.createElement("critical_info")
	ip_msg.appendChild(crit_name)
	txt = doc.createTextNode(crit)
	crit_name.appendChild(txt)

	dhcp_info = doc.createElement("dhcp_info")
	ip_msg.appendChild(dhcp_info)
	txt = doc.createTextNode(dhcp)
	dhcp_info.appendChild(txt)

	for m in macs:
		mac_info = doc.createElement("mac_addr")
		ip_msg.appendChild(mac_info)
		txt = doc.createTextNode(m)
		mac_info.appendChild(txt)

	return doc.toprettyxml(indent="   ")

if form.has_key("ip"):
	ip = form["ip"]
	req.content_type = 'text/xml'
	req.write(get_ip_msg(ip))
#get_ip_msg("")

%>

